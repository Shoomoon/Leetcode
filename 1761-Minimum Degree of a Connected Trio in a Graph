class Solution(object):
    def minTrioDegree(self, n, edges):
        """
        :type n: int
        :type edges: List[List[int]]
        :rtype: int
        """
        # build up graph first
        # using bfs to mark nodes's degree
        # for any node, if two of its connected children has same degree, then the 3 nodes consists of a trio
        # iterate trio
        # graph = collections.defaultdict(set)
        # for a, b in edges:
        #     graph[a].add(b)
        #     graph[b].add(a)
        # ans = -1
        # for a, b in edges:
        #     neighbours = len(graph[a]) + len(graph[b])
        #     # degree of trio (a, b, i) will be len(g[a]) + len(g[b]) + len(g[i]) - 6
        #     for i in graph[a] & graph[b]:
        #         ans = min(ans if ans >= 0 else len(edges), neighbours + len(graph[i]) - 6)
        #         if ans == 0:
        #             return 0
        # return ans
        
        # O(VE)
        # graph = collections.defaultdict(set)
        # for a, b in edges:
        #     graph[a].add(b)
        #     graph[b].add(a)
        # ans = -1
        # for a, b in edges:
        #     neighbours = len(graph[a]) + len(graph[b])
        #     # degree of trio (a, b, i) will be len(g[a]) + len(g[b]) + len(g[i]) - 6
        #     for i in graph[a]:
        #         if i in graph[b]:
        #             ans = min(ans if ans >= 0 else len(edges), neighbours + len(graph[i]) - 6)
        #             if ans == 0:
        #                 return 0
        # return ans
        
        graph = collections.defaultdict(set)
        for a, b in edges:
            graph[a].add(b)
            graph[b].add(a)

        ans = -1
        m = len(edges)
        sorted_nodes = sorted([len(graph[i]), i] for i in range(1, n + 1))
        for a, b in edges:
            neighbours = len(graph[a]) + len(graph[b])
            if 0 <= ans <= neighbours - 2:
                continue
            # degree of trio (a, b, i) will be len(g[a]) + len(g[b]) + len(g[i]) - 6
            for children, i in sorted_nodes:
                if i in graph[a] and i in graph[b]:
                    ans = min(ans if ans >= 0 else m, neighbours + len(graph[i]) - 6)
                    break
            if ans == 0:
                return 0
        return ans
