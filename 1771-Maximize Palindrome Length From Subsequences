class Solution(object):
    def longestPalindrome(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        # dp[i, j] denotes the maximum palindrome length of word1[i:min(m - 1, j)] + word2[:(j - m + 1, 0)]
        # dp[i, i] = 1
        # if word1[i] == (word1[j] if j < m else word2[j - m]), then dp[i, j] = dp[i + 1, j - 1] + 2
        # if j >= m and i < m, then dp[i, j] is a candidate
        # otherwise dp[i, j] = max(dp[i, j - 1], dp[i + 1, j])
        m, n = len(word1), len(word2)
        dp = [0] * (m + n)
        ans = 0
        for i in range(m + n - 1, -1, -1):
            pre = 0
            dp[i] = 1
            for j in range(i + 1, m + n):
                tmp = dp[j]
                if (word1[i] if i < m else word2[i - m]) == (word1[j] if j < m else word2[j - m]):
                    dp[j] = pre + 2
                    if i < m <= j:
                        ans = max(ans, dp[j])
                else:
                    dp[j] = max(dp[j - 1], dp[j])
                pre = tmp
        return ans if ans > 1 else 0
